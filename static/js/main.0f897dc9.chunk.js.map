{"version":3,"sources":["PhotoCard.js","App.js","serviceWorker.js","index.js"],"names":["PhotoCard","cardId","closeCard","useState","card","setCard","name","setName","comment","setComment","useEffect","axios","get","then","res","data","catch","e","console","log","close","handleChange","target","value","className","onClick","src","url","alt","comments","map","key","date","_date","Date","getMonth","getDate","getFullYear","formatDate","text","type","id","placeholder","onChange","post","status","message","Avito","cards","setCards","selectedCardId","setSelectedCardId","openCard","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"iSAoGeA,MAhGf,YAA2C,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UAAa,EACdC,qBADc,mBAC/BC,EAD+B,KACzBC,EADyB,OAEdF,mBAAS,IAFK,mBAE/BG,EAF+B,KAEzBC,EAFyB,OAGRJ,mBAAS,IAHD,mBAG/BK,EAH+B,KAGtBC,EAHsB,KAItCC,qBAAU,WACFT,GACJU,IAAMC,IAAN,4DAA+DX,IAC1DY,MAAK,SAAAC,GACFT,GAAQ,SAAAD,GAAI,OAAIU,EAAIC,WAEvBC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,QAC7B,CAAChB,IAEJ,IAAMmB,EAAQ,WACVf,EAAQ,IACRH,KAGEmB,EAAe,SAACJ,GAClB,OAAOA,EAAEK,OAAOhB,MACZ,IAAK,OAAQC,EAAQU,EAAEK,OAAOC,OAAQ,MACtC,IAAK,UAAWd,EAAWQ,EAAEK,OAAOC,OAAQ,MAC5C,QAAS,SAwBjB,OAAQnB,GAAQH,EAER,yBAAKuB,UAAU,SACX,yBAAKA,UAAU,oBAAoBC,QAASL,IAC5C,yBAAKI,UAAU,QACX,yBAAKA,UAAU,eACX,4BAAQC,QAASL,GAAjB,MAEJ,yBAAKI,UAAU,eACX,yBAAKE,IAAKtB,EAAKuB,IAAKC,IAAI,aAE5B,yBAAKJ,UAAU,kBAEPpB,EAAKyB,SAASC,KAAI,SAAAtB,GACd,OACI,yBAAKgB,UAAU,UAAUO,IAAKvB,EAAQwB,MAClC,wBAAIR,UAAU,iBAxB/B,SAACS,GAChB,IAAID,EAAO,IAAIE,KAAKD,GAIpB,OAHAf,QAAQC,IAAIa,GACZd,QAAQC,IAAIa,EAAKG,YACR,UAAMH,EAAKI,UAAX,YAAwBJ,EAAKG,WAAW,EAAxC,YAA6CH,EAAKK,eAqBtBC,CAAW9B,EAAQwB,OAExB,wBAAIR,UAAU,iBACThB,EAAQ+B,WAOjC,yBAAKf,UAAU,qBACX,2BACIgB,KAAK,OACLlC,KAAK,OACLmC,GAAG,OACHC,YAAY,8CACZnB,MAAOjB,EACPqC,SAAUtB,IAEd,2BACImB,KAAK,OACLlC,KAAK,UACLmC,GAAG,UACHC,YAAY,wFACZnB,MAAOf,EACPmC,SAAUtB,IAEd,4BAAQI,QAhET,WACfd,IAAMiC,KAAN,4DAAgE3C,EAAhE,aACA,CAAEK,KAAMA,EAAME,QAASA,IACtBK,MAAK,SAACC,GACgB,MAAfA,EAAI+B,SACJtC,EAAQ,IACRE,EAAW,QAGlBO,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,EAAE6B,cAuDV,0HAGF,MC3CPC,MAhDf,WAAkB,IAAD,EACW5C,mBAAS,IADpB,mBACR6C,EADQ,KACDC,EADC,OAE6B9C,qBAF7B,mBAER+C,EAFQ,KAEQC,EAFR,KAGfzC,qBAAU,WACRC,IAAMC,IAAI,qDACPC,MAAK,SAAAC,GAAG,OAAImC,EAASnC,EAAIC,SACzBC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,QACzB,IAEH,IAAMmC,EAAW,SAACnC,GAChBkC,EAAkBlC,EAAEK,OAAOhB,OAO7B,OACE,oCACE,kBAAC,EAAD,CAAWL,OAAQiD,EAAgBhD,UANrB,WAChBiD,EAAkB,OAMhB,yBAAK3B,UAAU,aACb,4BAAQA,UAAU,UAChB,wBAAIA,UAAU,iBAAd,aAEF,0BAAMA,UAAU,QAEZwB,EAAMK,OAASL,EAAMlB,KAAI,SAAA1B,GAAI,OAC1B,yBAAKoB,UAAU,cAAcO,IAAK3B,EAAKqC,IACtC,yBACEnC,KAAMF,EAAKqC,GACXf,IAAKtB,EAAKuB,IACVC,IAAI,YACJG,IAAK3B,EAAKqC,GACVhB,QAAS2B,QAIb,cAGN,4BAAQ5B,UAAU,UAChB,wBAAIA,UAAU,qBAAd,qBCnCU8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdpD,OAAM,SAAAqD,GACLnD,QAAQmD,MAAMA,EAAMvB,c","file":"static/js/main.0f897dc9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport './PhotoCard.css'\n\nfunction PhotoCard({ cardId, closeCard }) {\n    const [card, setCard] = useState();\n    const [name, setName] = useState('')\n    const [comment, setComment] = useState('');\n    useEffect(() => {\n        if(!cardId) return;\n        axios.get(`https://boiling-refuge-66454.herokuapp.com/images/${cardId}`)\n            .then(res => {\n                setCard(card => res.data);\n            })\n            .catch(e => console.log(e))\n    }, [cardId])\n\n    const close = () => {\n        setCard('');\n        closeCard();\n    }\n\n    const handleChange = (e) => {\n        switch(e.target.name) {\n            case 'name': setName(e.target.value); break;\n            case 'comment': setComment(e.target.value); break;\n            default: return;\n        }\n    }   \n\n    const addComment = () => {\n        axios.post(`https://boiling-refuge-66454.herokuapp.com/images/${cardId}/comments`, \n        { name: name, comment: comment })\n        .then((res) => {\n            if (res.status === 204){\n                setName('');\n                setComment('');\n            }\n        })\n        .catch(e => console.log(e.message));\n    }\n\n    const formatDate = (_date) => {\n        let date = new Date(_date);\n        console.log(date);\n        console.log(date.getMonth());\n        const res = `${date.getDate()}.${date.getMonth()+1}.${date.getFullYear()}`;\n        return res;\n    }\n\n    return (card && cardId) ?\n        (\n            <div className=\"popup\">\n                <div className=\"popup__background\" onClick={close}></div>\n                <div className=\"card\">\n                    <div className=\"card__close\">\n                        <button onClick={close}>x</button>\n                    </div>\n                    <div className=\"card__photo\">\n                        <img src={card.url} alt=\"card.id\" />\n                    </div>\n                    <div className=\"card__comments\">\n                        {\n                            card.comments.map(comment => {\n                                return (\n                                    <div className=\"comment\" key={comment.date}>\n                                        <h4 className=\"comment__date\">\n                                            {formatDate(comment.date)}\n                                        </h4>\n                                        <h4 className=\"comment__text\">\n                                            {comment.text}\n                                        </h4>\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                    <div className=\"card__commentform\">\n                        <input \n                            type=\"text\" \n                            name=\"name\" \n                            id=\"name\" \n                            placeholder=\"Ваше имя\"\n                            value={name}\n                            onChange={handleChange} \n                        />\n                        <input \n                            type=\"text\" \n                            name=\"comment\" \n                            id=\"comment\" \n                            placeholder=\"Ваш комментарий\"\n                            value={comment}\n                            onChange={handleChange}\n                        />\n                        <button onClick={addComment}>Оставить комменатрий</button>\n                    </div>\n                </div>\n            </div>) : null\n}\n\nexport default PhotoCard\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport './App.css'\n\nimport PhotoCard from './PhotoCard'\n\nfunction Avito() {\n  const [cards, setCards] = useState([])\n  const [selectedCardId, setSelectedCardId] = useState();\n  useEffect(() => {\n    axios.get('https://boiling-refuge-66454.herokuapp.com/images')\n      .then(res => setCards(res.data))\n      .catch(e => console.log(e))\n  }, [])\n\n  const openCard = (e) => {\n    setSelectedCardId(e.target.name);\n  }\n\n  const closeCard = () => {\n    setSelectedCardId('');\n  }\n\n  return (\n    <>\n      <PhotoCard cardId={selectedCardId} closeCard={closeCard}/>\n      <div className=\"container\">\n        <header className=\"header\">\n          <h1 className=\"header__title\">Test App</h1>\n        </header>\n        <main className=\"main\">\n          {\n            cards.length ? cards.map(card =>\n              (<div className=\"main__image\" key={card.id}>\n                <img\n                  name={card.id}\n                  src={card.url}\n                  alt='nice view'\n                  key={card.id}\n                  onClick={openCard}\n                />\n              </div>)\n            ) :\n              'loading...'\n          }\n        </main>\n        <footer className=\"footer\">\n          <h3 className=\"footer__copyright\">©2018-2019</h3>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nexport default Avito\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}